import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
//thunk action createer will generate 3 action types: 'posts/loadPosts/pending', etc for
//pending, fulfilled, and rejected

//Currently, these 3 action types have no effect on our posts slice, which would only responds 
//to action types generated by createSlice.

export const loadPosts = createAsyncThunk(
      'posts/loadPosts',
      async () => {
            const data = await fetch('https://www.reddit.com/r/popular.json');
            const json = await data.json();
            return json.data.children;
      }
);

//import 'term' from elsewhere
//  or use useParams in post to get value of term 

export const loadSearchResults = createAsyncThunk(
      'posts/loadSearchResults', 
      async (term) => {
            const searchResults = await fetch(`https://www.reddit.com/search.json?q=cake%20recipes`);
            const json = await searchResults.json();
            
            console.log(json.data.children);
            return json.data.children;
      }
  );


export const postsSlice = createSlice({
      //should the eventhandlers for the searchbar go in the reducer? 

      name: 'posts',
      initialState: {
            posts: [],
            isLoading: false,
            hasError: false,
      },
      reducers: {}
      ,
      //reducers for loadPosts
      extraReducers: {
            [loadPosts.pending]: (state, action) => {
                  state.isLoading = true;
                  state.hasError = false;
            },
            [loadPosts.fulfilled]: (state, action) => {
                  state.isLoading = false;
                  state.posts = action.payload;
            },
            [loadPosts.rejected]: (state, action) => {
                  state.isLoading = false;
                  state.hasError = true;
            }, 
      //reducers for loadSearchTerm

            [loadSearchResults.pending]: (state, action) => {
                  state.isLoading = true;
                  state.hasError = false;
            },
            [loadSearchResults.fulfilled]: (state, action) => {
                  state.isLoading = false;
                  state.posts = action.payload;
            },
            [loadSearchResults.rejected]: (state, action) => {
                  state.isLoading = false;
                  state.hasError = true;
            },
      }
});

export const selectPosts = (state) => state.posts.posts;


export default postsSlice.reducer; 





